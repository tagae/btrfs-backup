#!/bin/bash

# Â© 2015 Sebastian Gonzalez
# http://www.apache.org/licenses/LICENSE-2.0

this=$(realpath "$0" || echo "Please install GNU coreutils" >&2)
scripts=$(dirname "$this")

source "$scripts/btrfs-backup-lib.sh"

usage() {
    cat >&2 <<EOF
Usage: $script <pool>

Removes old backups from snapshot pool <pool>.

Example: $script /var/backup/home
EOF
    exit 1
}

(( $# == 1 )) || usage
pool=$1

use-pool "$pool"

patch-day-field () {
    # Replace the separator of date and time with a dash.
    while read line; do
        echo ${line:0:10}-${line:11}
    done
}

restore-day-field () {
    # Replace the separator of date and time with a space.
    while read line; do
        echo ${line:0:10} ${line:11}
    done
}

filter-date() {
    (( 1 <= $# && $# <= 2)) || die "Usage: filter-date <key1> [key2]"
    sort --unique --key=$1${2:+,$2} --field=- --stable
}

last-for-day() {
    # Help `sort` find the third field (the day).
    # (could be avoided if `sort` supported multiple field separators)
    patch-day-field | filter-date 1 3 | restore-day-field
}

last-for-month() {
    filter-date 1 2
}

last-for-year() {
    filter-date 1 1
}

now=$(now)
this_day=${now%% *}
this_month=${this_day%-*}
this_year=${this_month%-*}

this-day() {
    egrep "^$this_day.*"
}

this-month() {
    egrep "^$this_month.*"
}

this-year() {
    egrep "^$this_year.*"
}

today() {
    this-day
}

last-3-years() {
    egrep "^($this_year|$((this_year-1))|$((this_year-2))).*"
}

without-repetitions() {
    sort --reverse | uniq --unique
}

# Prints input lines that are not filtered out.
not() {
    (( $# == 1)) || die "Usage: not <filter>"
    # Duplicate undesired entries and eliminate them.
    tee >($1) | without-repetitions
}

neither() {
    (( $# == 2)) || die "Usage: neither <filter1> <filter2>"
    # Replicate the entries that should be eliminated.
    tee >($1) >($2) | without-repetitions
}

delete-subvolumes() {
    while read subvolume; do
        local path=$pool/$subvolume
        btrfs subvolume delete "$path" > /dev/null
        echo "Removed subvolume $path"
    done
}

#---[ Cleanup tasks ]---

# Delete empty subvolumes (usually created for testing).
find "$pool" -maxdepth 1 -type d -empty -print0 | \
    xargs -0 -n 1 -r btrfs subvolume delete | \
    sed -e "s/Delete subvolume[^:]*:[^']*'\([^']*\)'/Removed empty subvolume \1/g"

# Run cleanup filters.
if [ -d "$scripts"/cleanup.d ]; then
    for filter in "$scripts"/cleanup.d/*.sh; do
        subvolume-names "$pool" | (source "$filter") | delete-subvolumes
    done
fi
